from uuid import UUIDfrom fastapi import APIRouter, Depends, HTTPException, Response, statusfrom typing import List,Optionalfrom app.api.dependencies import get_airport_servicefrom app.domain.service import AirportServicefrom app.domain.airport_schema import AirportCreate, AirportReadfrom app.auth.deps import require_rolerouter = APIRouter()@router.get("/",response_model= List[AirportRead])async def list_airports(service=Depends(get_airport_service)):    return await service.list_airports()@router.post("/",response_model=AirportRead, dependencies=[Depends(require_role("user","admin"))])async def create_airport(        payload: AirportCreate,        service = Depends(get_airport_service)):    return await service.create_airport(payload)@router.delete(    "/{airport_id}",    status_code=status.HTTP_204_NO_CONTENT,    dependencies=[Depends(require_role("admin"))],)async def delete_airport(    airport_id: UUID,    service: AirportService = Depends(get_airport_service),):    deleted = await service.delete_airport(airport_id)    if not deleted:        raise HTTPException(status_code=404, detail="Airport not found")    return Response(status_code=status.HTTP_204_NO_CONTENT)